/**
 * HTML patterns
 *
 * @author Craig Campbell
 */
HighlightRainbow.extend('html', [
    {
        name: 'source.php.embedded',
        matches: {
            1: 'variable.language.php-tag',
            2: {
                language: 'php'
            },
            3: 'variable.language.php-tag'
        },
        pattern: /(&lt;\?php|&lt;\?=?(?!xml))([\s\S]*?)(\?&gt;)/gm
    },
    {
        name: 'source.css.embedded',
        matches: {
            1: {
                matches: {
                    1: 'support.tag.style',
                    2: [
                        {
                            name: 'entity.tag.style',
                            pattern: /^style/g
                        },
                        {
                            name: 'string',
                            pattern: /('|")(.*?)(\1)/g
                        },
                        {
                            name: 'entity.tag.style.attribute',
                            pattern: /(\w+)/g
                        }
                    ],
                    3: 'support.tag.style'
                },
                pattern: /(&lt;\/?)(style.*?)(&gt;)/g
            },
            2: {
                language: 'css'
            },
            3: 'support.tag.style',
            4: 'entity.tag.style',
            5: 'support.tag.style'
        },
        pattern: /(&lt;style.*?&gt;)([\s\S]*?)(&lt;\/)(style)(&gt;)/gm
    },
    {
        name: 'source.js.embedded',
        matches: {
            1: {
                matches: {
                    1: 'support.tag.script',
                    2: [
                        {
                            name: 'entity.tag.script',
                            pattern: /^script/g
                        },

                        {
                            name: 'string',
                            pattern: /('|")(.*?)(\1)/g
                        },
                        {
                            name: 'entity.tag.script.attribute',
                            pattern: /(\w+)/g
                        }
                    ],
                    3: 'support.tag.script'
                },
                pattern: /(&lt;\/?)(script.*?)(&gt;)/g
            },
            2: {
                language: 'javascript'
            },
            3: 'support.tag.script',
            4: 'entity.tag.script',
            5: 'support.tag.script'
        },
        pattern: /(&lt;script(?! src).*?&gt;)([\s\S]*?)(&lt;\/)(script)(&gt;)/gm
    },
    {
        name: 'comment.html',
        pattern: /&lt;\!--[\S\s]*?--&gt;/g
    },
    {
        matches: {
            1: 'support.tag.open',
            2: 'support.tag.close'
        },
        pattern: /(&lt;)|(\/?\??&gt;)/g
    },
    {
        name: 'support.tag',
        matches: {
            1: 'support.tag',
            2: 'support.tag.special',
            3: 'support.tag-name'
        },
        pattern: /(&lt;\??)(\/|\!?)(\w+)/g
    },
    {
        matches: {
            1: 'support.attribute'
        },
        pattern: /([a-z-]+)(?=\=)/gi
    },
    {
        matches: {
            1: 'support.operator',
            2: 'string.quote',
            3: 'string.value',
            4: 'string.quote'
        },
        pattern: /(=)('|")(.*?)(\2)/g
    },
    {
        matches: {
            1: 'support.operator',
            2: 'support.value'
        },
        pattern: /(=)([a-zA-Z\-0-9]*)\b/g
    },
    {
        matches: {
            1: 'support.attribute'
        },
        pattern: /\s([\w-]+)(?=\s|&gt;)(?![\s\S]*&lt;)/g
    }
]);


/**
 * CSS patterns
 *
 * @author Craig Campbell
 */
HighlightRainbow.extend('css', [
    {
        name: 'comment',
        pattern: /\/\*[\s\S]*?\*\//gm
    },
    {
        name: 'constant.hex-color',
        pattern: /#([a-f0-9]{3}|[a-f0-9]{6})(?=;|\s|,|\))/gi
    },
    {
        matches: {
            1: 'constant.numeric',
            2: 'keyword.unit'
        },
        pattern: /(\d+)(px|em|cm|s|%)?/g
    },
    {
        name: 'string',
        pattern: /('|")(.*?)\1/g
    },
    {
        name: 'support.css-property',
        matches: {
            1: 'support.vendor-prefix'
        },
        pattern: /(-o-|-moz-|-webkit-|-ms-)?[\w-]+(?=\s?:)(?!.*\{)/g
    },
    {
        matches: {
            1: [
                {
                    name: 'entity.name.sass',
                    pattern: /&amp;/g
                },
                {
                    name: 'direct-descendant',
                    pattern: /&gt;/g
                },
                {
                    name: 'entity.name.class',
                    pattern: /\.[\w\-_]+/g
                },
                {
                    name: 'entity.name.id',
                    pattern: /\#[\w\-_]+/g
                },
                {
                    name: 'entity.name.pseudo',
                    pattern: /:[\w\-_]+/g
                },
                {
                    name: 'entity.name.tag',
                    pattern: /\w+/g
                }
            ]
        },
        pattern: /([\w\ ,\n:\.\#\&\;\-_]+)(?=.*\{)/g
    },
    {
        matches: {
            2: 'support.vendor-prefix',
            3: 'support.css-value'
        },
        pattern: /(:|,)\s*(-o-|-moz-|-webkit-|-ms-)?([a-zA-Z-]*)(?=\b)(?!.*\{)/g
    }
]);


/**
 * PHP patterns
 *
 * @author Craig Campbell
 */
HighlightRainbow.extend('php', [
    {
        name: 'support',
        pattern: /\becho\b/ig
    },
    {
        matches: {
            1: 'variable.dollar-sign',
            2: 'variable'
        },
        pattern: /(\$)(\w+)\b/g
    },
    {
        name: 'constant.language',
        pattern: /true|false|null/ig
    },
    {
        name: 'constant',
        pattern: /\b[A-Z0-9_]{2,}\b/g
    },
    {
        name: 'keyword.dot',
        pattern: /\./g
    },
    {
        name: 'keyword',
        pattern: /\b(die|end(for(each)?|switch|if)|case|require(_once)?|include(_once)?)(?=\b)/ig
    },
    {
        matches: {
            1: 'keyword',
            2: {
                name: 'support.class',
                pattern: /\w+/g
            }
        },
        pattern: /(instanceof)\s([^\$].*?)(\)|;)/ig
    },

    /**
     * these are the top 50 most used PHP functions
     * found from running a script and checking the frequency of each function
     * over a bunch of popular PHP frameworks then combining the results
     */
    {
        matches: {
            1: 'support.function'
        },
        pattern: /\b(array(_key_exists|_merge|_keys|_shift)?|isset|count|empty|unset|printf|is_(array|string|numeric|object)|sprintf|each|date|time|substr|pos|str(len|pos|tolower|_replace|totime)?|ord|trim|in_array|implode|end|preg_match|explode|fmod|define|link|list|get_class|serialize|file|sort|mail|dir|idate|log|intval|header|chr|function_exists|dirname|preg_replace|file_exists)(?=\()/ig
    },
    {
        name: 'variable.language.php-tag',
        pattern: /(&lt;\?(php)?|\?&gt;)/ig
    },
    {
        matches: {
            1: 'keyword.namespace',
            2: {
                name: 'support.namespace',
                pattern: /\w+/g
            }
        },
        pattern: /\b(namespace|use)\s(.*?);/ig
    },
    {
        matches: {
            1: 'storage.modifier',
            2: 'storage.class',
            3: 'entity.name.class',
            4: 'storage.modifier.extends',
            5: 'entity.other.inherited-class',
            6: 'storage.modifier.extends',
            7: 'entity.other.inherited-class'
        },
        pattern: /\b(abstract|final)?\s?(class|interface|trait)\s(\w+)(\sextends\s)?([\w\\]*)?(\simplements\s)?([\w\\]*)?\s?\{?(\n|\})/ig
    },
    {
        name: 'keyword.static',
        pattern: /self::|static::/ig
    },
    {
        matches: {
            1: 'storage.function',
            2: 'entity.name.function.magic'
        },
        pattern: /(function)\s(__.*?)(?=\()/ig
    },
    {
        matches: {
            1: 'storage.function',
            2: 'entity.name.function'
        },
        pattern: /(function)\s(.*?)(?=\()/ig
    },
    {
        matches: {
            1: 'keyword.new',
            2: {
                name: 'support.class',
                pattern: /\w+/g
            }
        },
        pattern: /\b(new)\s([^\$][a-z0-9_\\]*?)(?=\)|\(|;)/ig
    },
    {
        matches: {
            1: {
                name: 'support.class',
                pattern: /\w+/g
            },
            2: 'keyword.static'
        },
        pattern: /([\w\\]*?)(::)(?=\b|\$)/g
    },
    {
        matches: {
            2: {
                name: 'support.class',
                pattern: /\w+/g
            }
        },
        pattern: /(\(|,\s?)([\w\\]*?)(?=\s\$)/g
    }
], 'generic');

HighlightRainbow.extend('javascript', [

    {
        name: 'selector',
        pattern: /\$(?=\.|\()/g
    },
    {
        name: 'support',
        pattern: /\b(window|document)\b/g
    },
    {
        name: 'keyword',
        pattern: /\b(export|default|from)\b/g
    },
    {
        name: 'function.call',
        pattern: /\b(then)(?=\()/g
    },
    {
        name: 'variable.language.this',
        pattern: /\bthis\b/g
    },
    {
        name: 'variable.language.super',
        pattern: /super(?=\.|\()/g
    },
    {
        name: 'storage.type',
        pattern: /\b(const|let|var)(?=\s)/g
    },
    {
        matches: {
            1: 'support.property'
        },
        pattern: /\.(length|node(Name|Value))\b/g
    },
    {
        matches: {
            1: 'support.function'
        },
        pattern: /(setTimeout|setInterval)(?=\()/g
    },
    {
        matches: {
            1: 'support.method'
        },
        pattern: /\.(getAttribute|replace|push|getElementById|getElementsByClassName|setTimeout|setInterval)(?=\()/g
    },

    /**
     * matches any escaped characters inside of a js regex pattern
     *
     * @see https://github.com/ccampbell/HighlightRainbow/issues/22
     *
     * this was causing single line comments to fail so it now makes sure
     * the opening / is not directly followed by a *
     *
     * The body of the regex to match a regex was borrowed from:
     * http://stackoverflow.com/a/17843773/421333
     */
    {
        name: 'string.regexp',
        matches: {
            1: 'string.regexp.open',
            2: {
                name: 'constant.regexp.escape',
                pattern: /\\(.){1}/g
            },
            3: 'string.regexp.close',
            4: 'string.regexp.modifier'
        },
        pattern: /(\/)((?![*+?])(?:[^\r\n\[/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+)(\/)(?!\/)([igm]{0,3})/g
    },

    /**
     * matches runtime function declarations
     */
    {
        matches: {
            1: 'storage.type',
            3: 'entity.function'
        },
        pattern: /(var)?(\s|^)(\S+)(?=\s?=\s?function\()/g
    },

    /**
     * matches constructor call
     */
    {
        matches: {
            1: 'keyword',
            2: 'variable.type'
        },
        pattern: /(new)\s+(?!Promise)([^\(]*)(?=\()/g
    },

    /**
     * matches any function call in the style functionName: function()
     */
    {
        name: 'entity.function',
        pattern: /(\w+)(?=:\s{0,}function)/g
    },
    {
        name: 'constant.other',
        pattern: /\*(?= as)/g
    },
    {
        matches: {
            1: 'keyword',
            2: 'constant.other'
        },
        pattern: /(export)\s+(\*)/g
    },
    {
        matches: {
            1: 'storage.type.accessor',
            2: 'entity.name.function'
        },
        pattern: /(get|set)\s+(\w+)(?=\()/g
    },
    {
        matches: {
            2: 'entity.name.function'
        },
        pattern: /(^\s*)(\w+)(?=\([^\)]*?\)\s*\{)/gm
    },
    {
        matches: {
            1: 'storage.type.class',
            2: 'entity.name.class',
            3: 'storage.modifier.extends',
            4: 'entity.other.inherited-class'
        },
        pattern: /(class)\s+(\w+)(?:\s+(extends)\s+(\w+))?(?=\s*\{)/g
    },
    {
        name: 'storage.type.function.arrow',
        pattern: /=&gt;/g
    },
    {
        name: 'support.class.promise',
        pattern: /\bPromise(?=(\(|\.))/g
    }
], 'generic');

HighlightRainbow.addAlias('js', 'javascript');
HighlightRainbow.addAlias('scss', 'css');
HighlightRainbow.addAlias('xml', 'html');
